name: main
on: [push]

jobs:
  build-and-test:
    strategy:
      matrix:
        python-version: [3.8]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2


    - name: git setup
      # Set up git and export env vars to be used in later steps.
      #   Note the unconventional mechanism for exporting envs by appending to
      #   $GITHUB_ENV.
      id: git-setup
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo "WORKDIR=$(pwd)" >> $GITHUB_ENV


    - name: cythonize and pip
      run: |
        eval "$(conda shell.bash hook)"
        conda create -p ./cython-env -y cython
        conda activate ./cython-env
        python setup.py clean cythonize sdist
        (cd dist && pip install pybedtools-*.tar.gz && cd $TMPDIR && python -c 'import pybedtools; print(pybedtools.__file__)')
        conda deactivate


    # Set up conda and install pybedtools into that env
    - name: conda env and install locally
      run: |
        eval "$(conda shell.bash hook)"
        conda create -y -p ./test-env --channel conda-forge --channel bioconda python=${{ matrix.python-version }} --file requirements.txt --file test-requirements.txt --file optional-requirements.txt
        conda activate ./test-env
        mkdir -p /tmp/pybedtools-uncompressed
        cd /tmp/pybedtools-uncompressed
        tar -xf $WORKDIR/dist/pybedtools-*.tar.gz
        cd pybedtools-*
        pip install -e .
        python -c 'import pybedtools; print(pybedtools.__file__)'
        ls *


    ## Run pytest and sphinx doctests
    #- name: tests
    #  run: |
    #    eval "$(conda shell.bash hook)"
    #    cd $WORKDIR
    #    conda activate ./test-env

    #    # Note that the tests cannot be run from within the source directory,
    #    # otherwise there are issues importing cbedtools. The tests are part of
    #    # the built package though, and so can be run from the unpacked sdist
    #    # tarball
    #    cd /tmp/pybedtools-uncompressed/pybedtools-*
    #    pytest -v --doctest-modules
    #    pytest -v pybedtools/test/genomepy_integration.py
    #    cp -r $WORKDIR/docs .
    #    (cd docs && make clean doctest)


    - name: build-docs
      run: |
        eval "$(conda shell.bash hook)"
        cd $WORKDIR
        conda activate ./test-env
        (cd docs && make html)

        # It's easier to clone elsewhere and copy the built docs there
        git clone \
          --single-branch \
          --branch gh-pages "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY" \
          /tmp/docs

        rm -rf /tmp/docs/*
        cp -r docs/build/html/* /tmp/docs
        touch /tmp/docs/.nojekyll
        cd /tmp/docs
        git add .
        if git diff --cached --quiet; then
          echo "no changes, nothing to commit"
        else
          git commit -m 'update docs'
        fi
        cd $WORKDIR


    # Upload built docs as an artifact for inspection, even on PRs
    - name: docs artifact
      uses: actions/upload-artifact@v2
      with:
        name: docs
        path: docs/build/html


    - name: push docs to gh-pages branch
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        cd /tmp/docs
        git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY" gh-pages
        cd $WORKDIR
